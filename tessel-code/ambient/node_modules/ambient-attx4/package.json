{
  "name": "ambient-attx4",
  "version": "0.1.4",
  "description": "Library to run the Ambient Module for Tessel. Detects ambient light and sound levels",
  "main": "index.js",
  "scripts": {
    "test": "tinytap -e 'tessel run {} ${AMBIENT_PORT}' test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:tessel/ambient-attx4.git"
  },
  "author": {
    "name": "Jon McKay",
    "email": "jon@technical.io"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "directories": {
    "example": "examples"
  },
  "keywords": [
    "tessel",
    "ambient",
    "light",
    "sound"
  ],
  "hardware": {
    "./examples": "false",
    "./firmware": "false",
    "./test": "false"
  },
  "devDependencies": {
    "tinytap": "0.0.2"
  },
  "readme": "#Ambient\nDriver for the ambient-attx4 Tessel ambient (light and sound detecting) module.\n\nUse the Ambient module to gather data about the ambient light and sound levels.\n\nThe module currently supports 'streams' of light levels and sound levels, as well as trigger levels for light and sound levels. You can use triggers to get notified when, for example, a light turns on or somebody claps.\n\nAll the values received and used for triggers are between 0.0 and 1.0.\n\nYou'll notice that the light readings seem to be logarithmic - when making the ambient light brighter, the reading will increase slowly and then get faster. That's a property of the photodiode itself.\n\n##TODO\nMake functions to trigger when light/sound drops below a level (currently supports \"light turned on\" but not \"light turned off\")\n\n##Installation\n```sh\nnpm install ambient-attx4\n```\n\n##Example\n```js\n// Any copyright is dedicated to the Public Domain.\n// http://creativecommons.org/publicdomain/zero/1.0/\n\n/*********************************************\nThis ambient module example reports sound and\nlight levels to the console, and console.logs\nwhenever a specified light or sound level\ntrigger is met.\n*********************************************/\n\nvar tessel = require('tessel');\nvar ambient = require('ambient-attx4').use(tessel.port['A']);\n\nambient.on('ready', function () {\n // Get a stream of light data\n  ambient.on('light', function(data) {\n    console.log(\"Got some  light: \", data);\n  });\n\n  // Get a stream of sound level data\n  ambient.on('sound', function(data) {\n    console.log(\"Got some  sound: \", data);\n  });\n\n  // Set trigger levels\n  // The trigger value is a float between zero to 1\n  ambient.setLightTrigger(0.15);\n\n  ambient.on('light-trigger', function(data) {\n    console.log(\"Our light trigger was hit:\", data);\n\n    // Clear the trigger so it stops firing\n    ambient.clearLightTrigger();\n    //After 1.5 seconds reset light trigger\n    setTimeout(function () { \n\n        ambient.setLightTrigger(0.15);\n\n    },1500);\n  });\n\n  // Set a sound level trigger\n  // The trigger is a float between 0 and 1\n  ambient.setSoundTrigger(0.43);\n\n  ambient.on('sound-trigger', function(data) {\n\n    console.log(\"Something happened with sound: \", data);\n\n    // Clear it\n    ambient.clearSoundTrigger();\n\n    //After 1.5 seconds reset sound trigger\n    setTimeout(function () { \n      \n        ambient.setSoundTrigger(0.43);\n\n    },1500);\n\n  });\n});\n\nambient.on('error', function (err) {\n  console.log(err)\n});\n```\n\n##Methods\n\n##### * `ambient.clearLightTrigger(callback(err, triggerVal))` Clears trigger listener for light trigger.\n\n##### * `ambient.clearSoundTrigger(callback(err, triggerVal))` Clears trigger listener for sound trigger.\n\n##### * `ambient.getLightBuffer(callback(err, data))` Gets the last 10 light readings.\n\n##### * `ambient.getLightLevel(callback(err, data))` Gets a single data point of light level.\n\n##### * `ambient.getSoundBuffer(callback(err, data))` Gets the last 10 sound readings.\n\n##### * `ambient.getSoundLevel(callback(err, data))` Gets a single data point of sound level.\n\n##### * `ambient.setLightTrigger(triggerVal, callback(err, triggerVal))` Sets a trigger to emit a 'light-trigger' event when triggerVal is reached. `triggerVal` is a float between 0 and 1.0.\n\n##### * `ambient.setSoundTrigger(triggerVal, callback(err, triggerVal))` Sets a trigger to emit a 'sound-trigger' event when triggerVal is reached. `triggerVal` is a float between 0 and 1.0.\n\n##Events\n\n##### * `ambient.on('error', callback(err))` Emitted upon error.\n\n##### * `ambient.on('light', callback(lightData))` Get a stream of light data.\n\n##### * `ambient.on('light-trigger', callback(lightTriggerValue))` Emitted upon crossing light trigger threshold.\n\n##### * `ambient.on('ready', callback())` Emitted upon first successful communication between the Tessel and the module.\n\n##### * `ambient.on('sound', callback(soundData))` Get a stream of sound level data.\n\n##### * `ambient.on('sound-trigger', callback(soundTriggerValue))` Emitted upon crossing sound trigger threshold.\n\n## License\n\nMIT\nAPACHE\n",
  "bugs": {
    "url": "https://github.com/tessel/ambient-attx4/issues"
  },
  "homepage": "https://github.com/tessel/ambient-attx4",
  "_id": "ambient-attx4@0.1.4",
  "dist": {
    "shasum": "8d0a5fb778b325d38b5214d8ed676b564ff1abd8"
  },
  "_from": "ambient-attx4@",
  "_resolved": "https://registry.npmjs.org/ambient-attx4/-/ambient-attx4-0.1.4.tgz"
}
